<#

https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/
#>

# ----------------------------------------------------------------
# Helpers 
# ----------------------------------------------------------------
#region Helpers 
$GlobalIndentLevel = 0

function Write-Message {
    [CmdletBinding()] param(
        [Parameter(Mandatory)][String]
        $Message,
        [Parameter(Mandatory)][ValidateSet("Success", "Info", "Warning", "Error")][String]
        $Level
    )

    For ($i = 0; $i -lt $GlobalIndentLevel; $i++) {
        Write-Host -NoNewLine "    "
    }

    if ($Level -eq "Success") {
        Write-Host -ForegroundColor Green -NoNewline "[+] "
    } elseif ($Level -eq "Info") {
        Write-Host -ForegroundColor Blue -NoNewline "[*] "
    } elseif ($Level -eq "Warning") {
        Write-Host -ForegroundColor Yellow -NoNewline "[!] "
    } elseif ($Level -eq "Error") {
        Write-Host -ForegroundColor Red -NoNewline "[-] "
    } 

    Write-Host $Message
}

function DateToString {
    [CmdletBinding()] param(
        [System.DateTime]
        $Date
    )

    return $Date.ToString('yyyy-MM-dd - HH:mm:ss')
}
#endregion Helpers 


# ----------------------------------------------------------------
# Checks  
# ----------------------------------------------------------------
#region Checks 
function Invoke-SystemInfoCheck {
    <#
    .SYNOPSIS
    Short description
    
    .DESCRIPTION
    Long description
    
    .EXAMPLE
    An example
    
    .NOTES
    https://techthoughts.info/windows-version-numbers/
    #>
    
    [CmdletBinding()] param()

    $Item = Get-ItemProperty -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion" 

    $SystemInfoResult = New-Object PSObject 

    $SystemInfoResult | Add-Member -MemberType NoteProperty -Name "ProductName" -Value $Item.ProductName
    $SystemInfoResult | Add-Member -MemberType NoteProperty -Name "Major" -Value $Item.CurrentMajorVersionNumber
    $SystemInfoResult | Add-Member -MemberType NoteProperty -Name "Minor" -Value $Item.CurrentMinorVersionNumber
    $SystemInfoResult | Add-Member -MemberType NoteProperty -Name "Release" -Value $Item.ReleaseId
    $SystemInfoResult | Add-Member -MemberType NoteProperty -Name "Build" -Value $Item.CurrentBuild
    $SystemInfoResult | Add-Member -MemberType NoteProperty -Name "Revision" -Value $Item.UBR

    $FullVersion = "$($Item.CurrentMajorVersionNumber).$($Item.CurrentMinorVersionNumber).$($Item.CurrentBuild) Version $($Item.ReleaseId) ($($Item.CurrentBuild).$($Item.UBR))"

    Write-Message -Level Info "OS Name: $($Item.ProductName)"
    Write-Message -Level Info "OS Version: $($FullVersion)"
    
    return $SystemInfoResult
}

function Invoke-SystemStartupHistoryCheck {
    <#
    .SYNOPSIS
    Short description
    
    .DESCRIPTION
    Long description
    
    .PARAMETER TimeSpanInDays
    Parameter description
    
    .EXAMPLE
    An example
    
    .NOTES
    Event ID 6005: The Event log service was started, i.e. system startup theoretically.
    #>
    
    [CmdletBinding()] param(
        [int]
        $TimeSpanInDays = 31
    )

    $SystemStartupHistoryResult = New-Object -TypeName "PSObject" 
    $SystemStartupHistoryResult | Add-Member -MemberType "NoteProperty" -Name "Name" -Value "SystemStartupHistoryCheck"

    $StartDate = (Get-Date).AddDays(-$TimeSpanInDays)
    $EndDate = Get-Date

    $TimeSpan = New-TimeSpan -Start $StartDate -End $EndDate
    $SystemStartupHistoryResult | Add-Member -MemberType "NoteProperty" -Name "Timespan in days" -Value $TimeSpan.Days

    $StartupEvents = Get-EventLog -LogName "System" -EntryType "Information" -After $StartDate -Before $EndDate | Where-Object {$_.EventID -eq 6005}
    $SystemStartupHistoryResult | Add-Member -MemberType "NoteProperty" -Name "Number of startup events" -Value $StartupEvents.Length

    Write-Message -Level Info "Found $($StartupEvents.Length) startup events in the last $($TimeSpan.Days) days."

    if ($StartupEvents.Length -gt 0) {
        $SystemStartupHistoryResult | Add-Member -MemberType "NoteProperty" -Name "Last startup time" -Value "$(DateToString -Date $StartupEvents[0].TimeGenerated)"
        Write-Message -Level Info "Last startup time was: $(DateToString -Date $StartupEvents[0].TimeGenerated)"
    } else {
        $LastStartupTime = (Get-EventLog -LogName "System" -EntryType "Information" -Newest 1 -InstanceId 2147489653).TimeGenerated
        $SystemStartupHistoryResult | Add-Member -MemberType "NoteProperty" -Name "Last startup time" -Value "$(DateToString -Date $LastStartupTime)"
        Write-Message -Level Warning "Last startup time was: $(DateToString -Date $LastStartupTime)."
    }

    return $SystemStartupHistoryResult
}

function Invoke-SystemDrivesCheck {
    <#
    .SYNOPSIS
    Short description
    
    .DESCRIPTION
    Long description
    
    .EXAMPLE
    An example
    
    .NOTES
    General notes
    #>
    
    [CmdletBinding()] param()

    $Drives = Get-PSDrive -PSProvider "FileSystem"

    Write-Message -Level Info "Found $($Drives.Length) drives."
    ForEach ($Drive in $Drives) {
        $GlobalIndentLevel += 1
        Write-Message -Level Info "$($Drive.Root) - Display name: '$($Drive.DisplayRoot)' - Description: '$($Drive.Description)'"
        $GlobalIndentLevel -= 1
    }

    return $Drives 
}

function Invoke-UserPrivilegesCheck {
    <#
    .SYNOPSIS
    Short description
    
    .DESCRIPTION
    Long description
    
    .EXAMPLE
    An example
    
    .NOTES
    TODO: Rewrite this to avoid a call to an external tool 
    TODO: Add a description on how to exploit each priv 

    Interesting privileges 
        - SeAssignPrimaryTokenPrivilege
        - SeImpersonatePrivilege
        - SeCreateTokenPrivilege
        - SeDebugPrivilege
        - SeLoadDriverPrivilege
        - SeRestorePrivilege
        - SeTakeOwnershipPrivilege
    #>

    [CmdletBinding()] param()

    $UserPrivilegesResult = New-Object PSObject 

    $Privileges = "SeAssignPrimaryTokenPrivilege", "SeImpersonatePrivilege", "SeCreateTokenPrivilege", "SeDebugPrivilege", "SeLoadDriverPrivilege", "SeRestorePrivilege", "SeTakeOwnershipPrivilege", "SeShutdownPrivilege"

    #Start-Process -FilePath "whoami.exe" -ArgumentList "/priv" -Wait 
    $Output = (& whoami /priv | Out-String) 
    
    $ArrayOfPrivileges = New-Object System.Collections.ArrayList
    
    $NumberOfPrivs = 0
    $Lines = $Output.Split("`n")
    ForEach ($Line in $Lines) {
        If ($Line -Like "*Se*Privilege*") {
            $NumberOfPrivs += 1
            $Priv = $Line.Split(' ')[0]
            if ($Privileges -contains $Priv) {
                [void]$ArrayOfPrivileges.Add($Priv)
            }
        }
    }

    Write-Message -Level Info "Current user has $($NumberOfPrivs) privileges."
    
    $GlobalIndentLevel += 1
    if ($ArrayOfPrivileges.Length -gt 0) {
        ForEach ($Priv in $ArrayOfPrivileges) {
            Write-Message -Level Success "User has '$Priv' privilege."
            $UserPrivilegesResult | Add-Member -MemberType "NoteProperty" -Name "Privilege" -Value "$Priv"
        }
    } else {
        Write-Message -Level Info "No interesting privilege found."
    }
    $GlobalIndentLevel -= 1

    return $UserPrivilegesResult
}

function Invoke-LocalAdminGroupCheck {
    <#
    .SYNOPSIS
    Short description
    
    .DESCRIPTION
    Long description
    
    .EXAMPLE
    An example
    
    .NOTES
    S-1-5-32-544 = SID of the local admin group 
    S-1-5-21-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxx-500 = SID of the default local admin 
    #>

    [CmdletBinding()] param()

    $LocalAdminGroupResult = New-Object System.Collections.ArrayList 

    $LocalAdminGroup = Get-LocalGroup -SID "S-1-5-32-544"
    $LocalAdmins = Get-LocalGroupMember -Group $LocalAdminGroup 

    $GroupClassName = $LocalAdminGroup.ObjectClass 

    Write-Message -Level Info "The local group '$($LocalAdminGroup.Name)' has $($LocalAdmins.Length) members (users/groups)."

    ForEach ($LocalAdmin in $LocalAdmins) {
        $GlobalIndentLevel += 1
        $ItemName = ""
        $ItemType = $LocalAdmin.ObjectClass
        $ItemIsLocal = $True 
        $ItemIsEnabled = $True 
        $LocalAdminGroupResultItem = New-Object PSObject
        if  ($LocalAdmin.PrincipalSource -eq "Local") {
            $ItemIsLocal = $True
            if ($LocalAdmin.ObjectClass -eq $GroupClassName) {
                $LocalGroup = Get-LocalGroup -SID $LocalAdmin.SID 
                $ItemName = $LocalGroup.Name
                Write-Message -Level Info "Local group '$($LocalGroup.Name)'."
            } else {
                $LocalAccount = Get-LocalUser -SID $LocalAdmin.SID 
                $ItemName = $LocalAccount.Name
                if ($LocalAccount.Enabled) {
                    $ItemIsEnabled = $True 
                    Write-Message -Level Info "Local user '$($LocalAccount.Name)'."
                } else {
                    $ItemIsEnabled = $False 
                    Write-Message -Level Warning "Local user '$($LocalAccount.Name)' is disabled."
                }
            }
        } else {
            $ItemIsLocal = $False
            $ItemName = $LocalAdmin.Name
            if ($LocalAdmin.ObjectClass -eq $GroupClassName) {
                Write-Message -Level Info "Domain group/user '$($LocalAdmin.Name)'."
            }
        }

        $LocalAdminGroupResultItem | Add-Member -MemberType "NoteProperty" -Name "Name" -Value $ItemName
        $LocalAdminGroupResultItem | Add-Member -MemberType "NoteProperty" -Name "Type" -Value $ItemType
        $LocalAdminGroupResultItem | Add-Member -MemberType "NoteProperty" -Name "IsLocal" -Value $ItemIsLocal  
        $LocalAdminGroupResultItem | Add-Member -MemberType "NoteProperty" -Name "IsEnabled" -Value $ItemIsEnabled 
        [void]$LocalAdminGroupResult.Add($LocalAdminGroupResultItem)

        $GlobalIndentLevel -= 1
    }

    return $LocalAdminGroupResult
}
#endregion Checks


# ----------------------------------------------------------------
# Main  
# ----------------------------------------------------------------
#region Main
function Invoke-PrivescCheck {

    [CmdletBinding()] param()

    "`nPRIVILEGES`n"

    "`nChecking user privileges"
    $Results = Invoke-UserPrivilegesCheck
    #$Results | Format-List 

    "`nMISC`n"

    "`nChecking system version"
    $Results = Invoke-SystemInfoCheck
    #$Results | Format-List 

    "`nChecking local admin group"
    $Results = Invoke-LocalAdminGroupCheck
    #$Results | Format-List 

    # Check system boot time history
    "`nChecking system startup history"
    $Results = Invoke-SystemStartupHistoryCheck
    #$Results | Format-List 

    # List file system drives (partitions, network drives)
    "`nChecking file system drives"
    $Results = Invoke-SystemDrivesCheck
    #$Results | Format-List 
    
}
#endregion Main
